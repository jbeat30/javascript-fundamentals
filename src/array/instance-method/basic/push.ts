(() => {
  const arr: (number | number[])[] = [1, 2, 3];

  const newLength = arr.push(4);
  // push는 배열의 "맨 끝"에 요소를 추가함
  // 여기서는 4가 추가되어 -> [1, 2, 3, 4]가 됨
  // push는 추가된 후의 전체 배열 길이를 반환함
  console.log(`arr.push(4)의 반환값: ${newLength}`); // 4
  console.log(`push 후 배열 상태: ${arr}`); // [1, 2, 3, 4]

  // push는 한 번에 여러 개의 값을 추가할 수 있음
  arr.push(5, 6);
  // 5와 6이 순서대로 추가되어 -> [1, 2, 3, 4, 5, 6]
  console.log(`여러 개 push 후 배열: ${arr}`); // [1, 2, 3, 4, 5, 6]

  // 배열 자체를 push하면? 중첩 배열이 생김
  arr.push([7, 8]);
  // [7, 8]이라는 배열 전체가 하나의 요소로 추가됨
  // 즉, 마지막에 배열 하나가 들어간 상태가 됨 -> [1, 2, 3, 4, 5, 6, [7, 8]]
  // 이 때문에 arr의 타입은 (number | number[])[]처럼 설정되어 있음
  console.log(`배열을 push한 경우 (중첩 배열): ${arr}`); // [1, 2, 3, 4, 5, 6, [7, 8]]

  // 배열 내부의 값들을 개별 요소로 추가하고 싶다면 spread 문법 사용해야 함
  arr.push(...[9, 10]);
  // [9, 10] 배열을 펼쳐서 -> 9와 10이 각각 개별 요소로 추가됨
  // 최종 결과: [1, 2, 3, 4, 5, 6, [7, 8], 9, 10]
  console.log(`spread로 push한 경우 (중첩 없이): ${arr}`); // [1, 2, 3, 4, 5, 6, [7, 8], 9, 10]
})();